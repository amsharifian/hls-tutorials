// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gemm,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=403964955,HLS_SYN_TPT=none,HLS_SYN_MEM=1408,HLS_SYN_DSP=3,HLS_SYN_FF=1333,HLS_SYN_LUT=1789,HLS_VERSION=2019_1}" *)

module gemm (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_BUNDLE_AWVALID,
        m_axi_DATA_BUNDLE_AWREADY,
        m_axi_DATA_BUNDLE_AWADDR,
        m_axi_DATA_BUNDLE_AWID,
        m_axi_DATA_BUNDLE_AWLEN,
        m_axi_DATA_BUNDLE_AWSIZE,
        m_axi_DATA_BUNDLE_AWBURST,
        m_axi_DATA_BUNDLE_AWLOCK,
        m_axi_DATA_BUNDLE_AWCACHE,
        m_axi_DATA_BUNDLE_AWPROT,
        m_axi_DATA_BUNDLE_AWQOS,
        m_axi_DATA_BUNDLE_AWREGION,
        m_axi_DATA_BUNDLE_AWUSER,
        m_axi_DATA_BUNDLE_WVALID,
        m_axi_DATA_BUNDLE_WREADY,
        m_axi_DATA_BUNDLE_WDATA,
        m_axi_DATA_BUNDLE_WSTRB,
        m_axi_DATA_BUNDLE_WLAST,
        m_axi_DATA_BUNDLE_WID,
        m_axi_DATA_BUNDLE_WUSER,
        m_axi_DATA_BUNDLE_ARVALID,
        m_axi_DATA_BUNDLE_ARREADY,
        m_axi_DATA_BUNDLE_ARADDR,
        m_axi_DATA_BUNDLE_ARID,
        m_axi_DATA_BUNDLE_ARLEN,
        m_axi_DATA_BUNDLE_ARSIZE,
        m_axi_DATA_BUNDLE_ARBURST,
        m_axi_DATA_BUNDLE_ARLOCK,
        m_axi_DATA_BUNDLE_ARCACHE,
        m_axi_DATA_BUNDLE_ARPROT,
        m_axi_DATA_BUNDLE_ARQOS,
        m_axi_DATA_BUNDLE_ARREGION,
        m_axi_DATA_BUNDLE_ARUSER,
        m_axi_DATA_BUNDLE_RVALID,
        m_axi_DATA_BUNDLE_RREADY,
        m_axi_DATA_BUNDLE_RDATA,
        m_axi_DATA_BUNDLE_RLAST,
        m_axi_DATA_BUNDLE_RID,
        m_axi_DATA_BUNDLE_RUSER,
        m_axi_DATA_BUNDLE_RRESP,
        m_axi_DATA_BUNDLE_BVALID,
        m_axi_DATA_BUNDLE_BREADY,
        m_axi_DATA_BUNDLE_BRESP,
        m_axi_DATA_BUNDLE_BID,
        m_axi_DATA_BUNDLE_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_pp0_stage0 = 29'd256;
parameter    ap_ST_fsm_state12 = 29'd512;
parameter    ap_ST_fsm_state13 = 29'd1024;
parameter    ap_ST_fsm_state14 = 29'd2048;
parameter    ap_ST_fsm_state15 = 29'd4096;
parameter    ap_ST_fsm_state16 = 29'd8192;
parameter    ap_ST_fsm_state17 = 29'd16384;
parameter    ap_ST_fsm_state18 = 29'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 29'd65536;
parameter    ap_ST_fsm_state22 = 29'd131072;
parameter    ap_ST_fsm_state23 = 29'd262144;
parameter    ap_ST_fsm_state24 = 29'd524288;
parameter    ap_ST_fsm_state25 = 29'd1048576;
parameter    ap_ST_fsm_state26 = 29'd2097152;
parameter    ap_ST_fsm_state27 = 29'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 29'd8388608;
parameter    ap_ST_fsm_state31 = 29'd16777216;
parameter    ap_ST_fsm_state32 = 29'd33554432;
parameter    ap_ST_fsm_state33 = 29'd67108864;
parameter    ap_ST_fsm_state34 = 29'd134217728;
parameter    ap_ST_fsm_state35 = 29'd268435456;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_BUNDLE_AWVALID;
input   m_axi_DATA_BUNDLE_AWREADY;
output  [C_M_AXI_DATA_BUNDLE_ADDR_WIDTH - 1:0] m_axi_DATA_BUNDLE_AWADDR;
output  [C_M_AXI_DATA_BUNDLE_ID_WIDTH - 1:0] m_axi_DATA_BUNDLE_AWID;
output  [7:0] m_axi_DATA_BUNDLE_AWLEN;
output  [2:0] m_axi_DATA_BUNDLE_AWSIZE;
output  [1:0] m_axi_DATA_BUNDLE_AWBURST;
output  [1:0] m_axi_DATA_BUNDLE_AWLOCK;
output  [3:0] m_axi_DATA_BUNDLE_AWCACHE;
output  [2:0] m_axi_DATA_BUNDLE_AWPROT;
output  [3:0] m_axi_DATA_BUNDLE_AWQOS;
output  [3:0] m_axi_DATA_BUNDLE_AWREGION;
output  [C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_DATA_BUNDLE_AWUSER;
output   m_axi_DATA_BUNDLE_WVALID;
input   m_axi_DATA_BUNDLE_WREADY;
output  [C_M_AXI_DATA_BUNDLE_DATA_WIDTH - 1:0] m_axi_DATA_BUNDLE_WDATA;
output  [C_M_AXI_DATA_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_DATA_BUNDLE_WSTRB;
output   m_axi_DATA_BUNDLE_WLAST;
output  [C_M_AXI_DATA_BUNDLE_ID_WIDTH - 1:0] m_axi_DATA_BUNDLE_WID;
output  [C_M_AXI_DATA_BUNDLE_WUSER_WIDTH - 1:0] m_axi_DATA_BUNDLE_WUSER;
output   m_axi_DATA_BUNDLE_ARVALID;
input   m_axi_DATA_BUNDLE_ARREADY;
output  [C_M_AXI_DATA_BUNDLE_ADDR_WIDTH - 1:0] m_axi_DATA_BUNDLE_ARADDR;
output  [C_M_AXI_DATA_BUNDLE_ID_WIDTH - 1:0] m_axi_DATA_BUNDLE_ARID;
output  [7:0] m_axi_DATA_BUNDLE_ARLEN;
output  [2:0] m_axi_DATA_BUNDLE_ARSIZE;
output  [1:0] m_axi_DATA_BUNDLE_ARBURST;
output  [1:0] m_axi_DATA_BUNDLE_ARLOCK;
output  [3:0] m_axi_DATA_BUNDLE_ARCACHE;
output  [2:0] m_axi_DATA_BUNDLE_ARPROT;
output  [3:0] m_axi_DATA_BUNDLE_ARQOS;
output  [3:0] m_axi_DATA_BUNDLE_ARREGION;
output  [C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_DATA_BUNDLE_ARUSER;
input   m_axi_DATA_BUNDLE_RVALID;
output   m_axi_DATA_BUNDLE_RREADY;
input  [C_M_AXI_DATA_BUNDLE_DATA_WIDTH - 1:0] m_axi_DATA_BUNDLE_RDATA;
input   m_axi_DATA_BUNDLE_RLAST;
input  [C_M_AXI_DATA_BUNDLE_ID_WIDTH - 1:0] m_axi_DATA_BUNDLE_RID;
input  [C_M_AXI_DATA_BUNDLE_RUSER_WIDTH - 1:0] m_axi_DATA_BUNDLE_RUSER;
input  [1:0] m_axi_DATA_BUNDLE_RRESP;
input   m_axi_DATA_BUNDLE_BVALID;
output   m_axi_DATA_BUNDLE_BREADY;
input  [1:0] m_axi_DATA_BUNDLE_BRESP;
input  [C_M_AXI_DATA_BUNDLE_ID_WIDTH - 1:0] m_axi_DATA_BUNDLE_BID;
input  [C_M_AXI_DATA_BUNDLE_BUSER_WIDTH - 1:0] m_axi_DATA_BUNDLE_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a_in;
wire   [31:0] b_in;
wire   [31:0] output_r;
reg    DATA_BUNDLE_blk_n_AW;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln28_fu_655_p2;
reg    DATA_BUNDLE_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln41_reg_1021;
reg   [0:0] icmp_ln41_reg_1021_pp2_iter1_reg;
reg    DATA_BUNDLE_blk_n_B;
wire    ap_CS_fsm_state35;
reg    DATA_BUNDLE_blk_n_AR;
wire    ap_CS_fsm_state12;
reg    DATA_BUNDLE_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln22_reg_926;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln17_reg_892;
reg    DATA_BUNDLE_AWVALID;
wire    DATA_BUNDLE_AWREADY;
reg    DATA_BUNDLE_WVALID;
wire    DATA_BUNDLE_WREADY;
reg    DATA_BUNDLE_ARVALID;
wire    DATA_BUNDLE_ARREADY;
reg   [31:0] DATA_BUNDLE_ARADDR;
wire    DATA_BUNDLE_RVALID;
reg    DATA_BUNDLE_RREADY;
wire   [31:0] DATA_BUNDLE_RDATA;
wire    DATA_BUNDLE_RLAST;
wire   [0:0] DATA_BUNDLE_RID;
wire   [0:0] DATA_BUNDLE_RUSER;
wire   [1:0] DATA_BUNDLE_RRESP;
wire    DATA_BUNDLE_BVALID;
reg    DATA_BUNDLE_BREADY;
wire   [1:0] DATA_BUNDLE_BRESP;
wire   [0:0] DATA_BUNDLE_BID;
wire   [0:0] DATA_BUNDLE_BUSER;
reg   [18:0] indvar_flatten_reg_266;
reg   [9:0] i_0_reg_277;
reg   [9:0] phi_ln19_reg_288;
reg   [18:0] indvar_flatten10_reg_299;
reg   [9:0] i1_0_reg_310;
reg   [9:0] phi_ln24_reg_321;
reg   [18:0] indvar_flatten21_reg_378;
reg   [9:0] i3_0_reg_389;
reg   [9:0] phi_ln43_reg_400;
reg   [29:0] output5_reg_859;
reg   [29:0] b_in3_reg_864;
reg   [29:0] a_in1_reg_869;
reg   [31:0] DATA_BUNDLE_addr_reg_880;
wire    ap_CS_fsm_state8;
reg   [31:0] DATA_BUNDLE_addr_1_reg_886;
wire   [0:0] icmp_ln17_fu_469_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln17_reg_892_pp0_iter1_reg;
wire   [18:0] add_ln17_fu_475_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] select_ln17_1_fu_501_p3;
reg   [9:0] select_ln17_1_reg_901;
wire   [9:0] add_ln19_fu_521_p2;
wire   [8:0] trunc_ln19_fu_537_p1;
reg   [8:0] trunc_ln19_reg_911;
reg   [8:0] trunc_ln19_reg_911_pp0_iter1_reg;
reg   [8:0] lshr_ln_reg_916;
reg   [8:0] lshr_ln_reg_916_pp0_iter1_reg;
reg   [31:0] DATA_BUNDLE_addr_2_r_1_reg_921;
wire   [0:0] icmp_ln22_fu_562_p2;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln22_reg_926_pp1_iter1_reg;
wire   [18:0] add_ln22_fu_568_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [9:0] select_ln22_1_fu_594_p3;
reg   [9:0] select_ln22_1_reg_935;
wire   [9:0] add_ln24_fu_614_p2;
wire   [8:0] trunc_ln24_fu_630_p1;
reg   [8:0] trunc_ln24_reg_945;
reg   [8:0] trunc_ln24_reg_945_pp1_iter1_reg;
reg   [8:0] lshr_ln1_reg_950;
reg   [8:0] lshr_ln1_reg_950_pp1_iter1_reg;
reg   [31:0] DATA_BUNDLE_addr_1_r_1_reg_955;
reg    ap_block_state23_io;
wire   [9:0] i_3_fu_661_p2;
reg   [9:0] i_3_reg_964;
wire   [19:0] zext_ln31_fu_675_p1;
reg   [19:0] zext_ln31_reg_969;
wire   [9:0] j_fu_685_p2;
reg   [9:0] j_reg_978;
wire    ap_CS_fsm_state24;
wire   [19:0] zext_ln32_fu_691_p1;
reg   [19:0] zext_ln32_reg_983;
wire   [0:0] icmp_ln31_fu_679_p2;
reg   [17:0] c_buff_addr_reg_988;
wire   [9:0] k_fu_711_p2;
reg   [9:0] k_reg_996;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln34_fu_705_p2;
wire   [31:0] mul_ln35_fu_753_p2;
reg   [31:0] mul_ln35_reg_1011;
wire    ap_CS_fsm_state26;
wire   [31:0] add_ln35_fu_759_p2;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln41_fu_764_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
reg    ap_block_state30_io;
reg    ap_block_pp2_stage0_11001;
wire   [18:0] add_ln41_fu_770_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [9:0] select_ln41_1_fu_796_p3;
reg   [9:0] select_ln41_1_reg_1030;
wire   [9:0] add_ln43_fu_816_p2;
wire   [31:0] c_buff_q0;
reg   [31:0] c_buff_load_reg_1045;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg   [17:0] a_buff_address0;
reg    a_buff_ce0;
reg    a_buff_we0;
wire   [31:0] a_buff_q0;
reg   [17:0] b_buff_address0;
reg    b_buff_ce0;
reg    b_buff_we0;
wire   [31:0] b_buff_q0;
reg   [17:0] c_buff_address0;
reg    c_buff_ce0;
reg    c_buff_we0;
reg   [9:0] ap_phi_mux_i_0_phi_fu_281_p4;
reg   [9:0] ap_phi_mux_i1_0_phi_fu_314_p4;
reg   [9:0] i2_0_reg_332;
wire    ap_CS_fsm_state22;
reg   [9:0] j_0_reg_343;
reg   [31:0] c_buff_load_1_reg_354;
reg   [9:0] k_0_reg_367;
reg   [9:0] ap_phi_mux_i3_0_phi_fu_393_p4;
wire   [63:0] zext_ln19_1_fu_557_p1;
wire   [63:0] zext_ln24_1_fu_650_p1;
wire   [63:0] zext_ln32_1_fu_700_p1;
wire   [63:0] zext_ln35_1_fu_726_p1;
wire   [63:0] zext_ln35_3_fu_748_p1;
wire   [63:0] zext_ln43_1_fu_854_p1;
wire   [63:0] empty_8_fu_441_p1;
wire   [63:0] empty_fu_451_p1;
wire   [63:0] empty_7_fu_460_p1;
wire    ap_block_pp2_stage0_01001;
wire   [0:0] icmp_ln19_fu_487_p2;
wire   [9:0] i_fu_481_p2;
wire   [8:0] trunc_ln17_fu_509_p1;
wire   [9:0] select_ln17_fu_493_p3;
wire   [17:0] zext_ln19_fu_527_p1;
wire   [17:0] shl_ln19_mid2_fu_513_p3;
wire   [17:0] add_ln19_1_fu_531_p2;
wire   [17:0] tmp_1_fu_551_p3;
wire   [0:0] icmp_ln24_fu_580_p2;
wire   [9:0] i_1_fu_574_p2;
wire   [8:0] trunc_ln22_fu_602_p1;
wire   [9:0] select_ln22_fu_586_p3;
wire   [17:0] zext_ln24_fu_620_p1;
wire   [17:0] shl_ln24_mid2_fu_606_p3;
wire   [17:0] add_ln24_1_fu_624_p2;
wire   [17:0] tmp_5_fu_644_p3;
wire   [18:0] tmp_6_fu_667_p3;
wire   [19:0] add_ln32_fu_695_p2;
wire   [19:0] zext_ln35_fu_717_p1;
wire   [19:0] add_ln35_1_fu_721_p2;
wire   [18:0] tmp_9_fu_731_p3;
wire   [19:0] zext_ln35_2_fu_739_p1;
wire   [19:0] add_ln35_2_fu_743_p2;
wire  signed [31:0] mul_ln35_fu_753_p0;
wire  signed [31:0] mul_ln35_fu_753_p1;
wire   [0:0] icmp_ln43_fu_782_p2;
wire   [9:0] i_2_fu_776_p2;
wire   [8:0] trunc_ln41_fu_804_p1;
wire   [9:0] select_ln41_fu_788_p3;
wire   [17:0] zext_ln43_fu_822_p1;
wire   [17:0] shl_ln43_mid2_fu_808_p3;
wire   [17:0] add_ln43_1_fu_830_p2;
wire   [8:0] lshr_ln2_fu_836_p4;
wire   [8:0] trunc_ln43_fu_826_p1;
wire   [17:0] tmp_8_fu_846_p3;
reg   [28:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

gemm_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
gemm_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a_in(a_in),
    .b_in(b_in),
    .output_r(output_r)
);

gemm_DATA_BUNDLE_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 256 ),
    .MAX_WRITE_BURST_LENGTH( 256 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BUNDLE_CACHE_VALUE ))
gemm_DATA_BUNDLE_m_axi_U(
    .AWVALID(m_axi_DATA_BUNDLE_AWVALID),
    .AWREADY(m_axi_DATA_BUNDLE_AWREADY),
    .AWADDR(m_axi_DATA_BUNDLE_AWADDR),
    .AWID(m_axi_DATA_BUNDLE_AWID),
    .AWLEN(m_axi_DATA_BUNDLE_AWLEN),
    .AWSIZE(m_axi_DATA_BUNDLE_AWSIZE),
    .AWBURST(m_axi_DATA_BUNDLE_AWBURST),
    .AWLOCK(m_axi_DATA_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_DATA_BUNDLE_AWCACHE),
    .AWPROT(m_axi_DATA_BUNDLE_AWPROT),
    .AWQOS(m_axi_DATA_BUNDLE_AWQOS),
    .AWREGION(m_axi_DATA_BUNDLE_AWREGION),
    .AWUSER(m_axi_DATA_BUNDLE_AWUSER),
    .WVALID(m_axi_DATA_BUNDLE_WVALID),
    .WREADY(m_axi_DATA_BUNDLE_WREADY),
    .WDATA(m_axi_DATA_BUNDLE_WDATA),
    .WSTRB(m_axi_DATA_BUNDLE_WSTRB),
    .WLAST(m_axi_DATA_BUNDLE_WLAST),
    .WID(m_axi_DATA_BUNDLE_WID),
    .WUSER(m_axi_DATA_BUNDLE_WUSER),
    .ARVALID(m_axi_DATA_BUNDLE_ARVALID),
    .ARREADY(m_axi_DATA_BUNDLE_ARREADY),
    .ARADDR(m_axi_DATA_BUNDLE_ARADDR),
    .ARID(m_axi_DATA_BUNDLE_ARID),
    .ARLEN(m_axi_DATA_BUNDLE_ARLEN),
    .ARSIZE(m_axi_DATA_BUNDLE_ARSIZE),
    .ARBURST(m_axi_DATA_BUNDLE_ARBURST),
    .ARLOCK(m_axi_DATA_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_DATA_BUNDLE_ARCACHE),
    .ARPROT(m_axi_DATA_BUNDLE_ARPROT),
    .ARQOS(m_axi_DATA_BUNDLE_ARQOS),
    .ARREGION(m_axi_DATA_BUNDLE_ARREGION),
    .ARUSER(m_axi_DATA_BUNDLE_ARUSER),
    .RVALID(m_axi_DATA_BUNDLE_RVALID),
    .RREADY(m_axi_DATA_BUNDLE_RREADY),
    .RDATA(m_axi_DATA_BUNDLE_RDATA),
    .RLAST(m_axi_DATA_BUNDLE_RLAST),
    .RID(m_axi_DATA_BUNDLE_RID),
    .RUSER(m_axi_DATA_BUNDLE_RUSER),
    .RRESP(m_axi_DATA_BUNDLE_RRESP),
    .BVALID(m_axi_DATA_BUNDLE_BVALID),
    .BREADY(m_axi_DATA_BUNDLE_BREADY),
    .BRESP(m_axi_DATA_BUNDLE_BRESP),
    .BID(m_axi_DATA_BUNDLE_BID),
    .BUSER(m_axi_DATA_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BUNDLE_ARVALID),
    .I_ARREADY(DATA_BUNDLE_ARREADY),
    .I_ARADDR(DATA_BUNDLE_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd262144),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_BUNDLE_RVALID),
    .I_RREADY(DATA_BUNDLE_RREADY),
    .I_RDATA(DATA_BUNDLE_RDATA),
    .I_RID(DATA_BUNDLE_RID),
    .I_RUSER(DATA_BUNDLE_RUSER),
    .I_RRESP(DATA_BUNDLE_RRESP),
    .I_RLAST(DATA_BUNDLE_RLAST),
    .I_AWVALID(DATA_BUNDLE_AWVALID),
    .I_AWREADY(DATA_BUNDLE_AWREADY),
    .I_AWADDR(DATA_BUNDLE_addr_reg_880),
    .I_AWID(1'd0),
    .I_AWLEN(32'd262144),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_BUNDLE_WVALID),
    .I_WREADY(DATA_BUNDLE_WREADY),
    .I_WDATA(c_buff_load_reg_1045),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_BUNDLE_BVALID),
    .I_BREADY(DATA_BUNDLE_BREADY),
    .I_BRESP(DATA_BUNDLE_BRESP),
    .I_BID(DATA_BUNDLE_BID),
    .I_BUSER(DATA_BUNDLE_BUSER)
);

gemm_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
a_buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_buff_address0),
    .ce0(a_buff_ce0),
    .we0(a_buff_we0),
    .d0(DATA_BUNDLE_addr_2_r_1_reg_921),
    .q0(a_buff_q0)
);

gemm_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
b_buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_buff_address0),
    .ce0(b_buff_ce0),
    .we0(b_buff_we0),
    .d0(DATA_BUNDLE_addr_1_r_1_reg_955),
    .q0(b_buff_q0)
);

gemm_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
c_buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_buff_address0),
    .ce0(c_buff_ce0),
    .we0(c_buff_we0),
    .d0(c_buff_load_1_reg_354),
    .q0(c_buff_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        c_buff_load_1_reg_354 <= add_ln35_fu_759_p2;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln31_fu_679_p2 == 1'd0))) begin
        c_buff_load_1_reg_354 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_0_reg_310 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_reg_926 == 1'd0))) begin
        i1_0_reg_310 <= select_ln22_1_reg_935;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i2_0_reg_332 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln31_fu_679_p2 == 1'd1))) begin
        i2_0_reg_332 <= i_3_reg_964;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
        i3_0_reg_389 <= 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_reg_1021 == 1'd0))) begin
        i3_0_reg_389 <= select_ln41_1_reg_1030;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_892 == 1'd0))) begin
        i_0_reg_277 <= select_ln17_1_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_277 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten10_reg_299 <= 19'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_fu_562_p2 == 1'd0))) begin
        indvar_flatten10_reg_299 <= add_ln22_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
        indvar_flatten21_reg_378 <= 19'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_fu_764_p2 == 1'd0))) begin
        indvar_flatten21_reg_378 <= add_ln41_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_469_p2 == 1'd0))) begin
        indvar_flatten_reg_266 <= add_ln17_fu_475_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_266 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln34_fu_705_p2 == 1'd1))) begin
        j_0_reg_343 <= j_reg_978;
    end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd0))) begin
        j_0_reg_343 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_0_reg_367 <= k_reg_996;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln31_fu_679_p2 == 1'd0))) begin
        k_0_reg_367 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_469_p2 == 1'd0))) begin
        phi_ln19_reg_288 <= add_ln19_fu_521_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln19_reg_288 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_ln24_reg_321 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_fu_562_p2 == 1'd0))) begin
        phi_ln24_reg_321 <= add_ln24_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
        phi_ln43_reg_400 <= 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_fu_764_p2 == 1'd0))) begin
        phi_ln43_reg_400 <= add_ln43_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_reg_926 == 1'd0))) begin
        DATA_BUNDLE_addr_1_r_1_reg_955 <= DATA_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        DATA_BUNDLE_addr_1_reg_886[29 : 0] <= empty_7_fu_460_p1[29 : 0];
        DATA_BUNDLE_addr_reg_880[29 : 0] <= empty_fu_451_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_892 == 1'd0))) begin
        DATA_BUNDLE_addr_2_r_1_reg_921 <= DATA_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_in1_reg_869 <= {{a_in[31:2]}};
        b_in3_reg_864 <= {{b_in[31:2]}};
        output5_reg_859 <= {{output_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln31_fu_679_p2 == 1'd0))) begin
        c_buff_addr_reg_988 <= zext_ln32_1_fu_700_p1;
        zext_ln32_reg_983[9 : 0] <= zext_ln32_fu_691_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_reg_1021 == 1'd0))) begin
        c_buff_load_reg_1045 <= c_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23))) begin
        i_3_reg_964 <= i_3_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln17_reg_892 <= icmp_ln17_fu_469_p2;
        icmp_ln17_reg_892_pp0_iter1_reg <= icmp_ln17_reg_892;
        lshr_ln_reg_916_pp0_iter1_reg <= lshr_ln_reg_916;
        trunc_ln19_reg_911_pp0_iter1_reg <= trunc_ln19_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln22_reg_926 <= icmp_ln22_fu_562_p2;
        icmp_ln22_reg_926_pp1_iter1_reg <= icmp_ln22_reg_926;
        lshr_ln1_reg_950_pp1_iter1_reg <= lshr_ln1_reg_950;
        trunc_ln24_reg_945_pp1_iter1_reg <= trunc_ln24_reg_945;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln41_reg_1021 <= icmp_ln41_fu_764_p2;
        icmp_ln41_reg_1021_pp2_iter1_reg <= icmp_ln41_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_reg_978 <= j_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        k_reg_996 <= k_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_fu_562_p2 == 1'd0))) begin
        lshr_ln1_reg_950 <= {{add_ln24_1_fu_624_p2[17:9]}};
        trunc_ln24_reg_945 <= trunc_ln24_fu_630_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_469_p2 == 1'd0))) begin
        lshr_ln_reg_916 <= {{add_ln19_1_fu_531_p2[17:9]}};
        trunc_ln19_reg_911 <= trunc_ln19_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln35_reg_1011 <= mul_ln35_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_469_p2 == 1'd0))) begin
        select_ln17_1_reg_901 <= select_ln17_1_fu_501_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_fu_562_p2 == 1'd0))) begin
        select_ln22_1_reg_935 <= select_ln22_1_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_fu_764_p2 == 1'd0))) begin
        select_ln41_1_reg_1030 <= select_ln41_1_fu_796_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd0))) begin
        zext_ln31_reg_969[18 : 9] <= zext_ln31_fu_675_p1[18 : 9];
    end
end

always @ (*) begin
    if ((1'b1 == DATA_BUNDLE_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            DATA_BUNDLE_ARADDR = DATA_BUNDLE_addr_1_reg_886;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            DATA_BUNDLE_ARADDR = empty_8_fu_441_p1;
        end else begin
            DATA_BUNDLE_ARADDR = 'bx;
        end
    end else begin
        DATA_BUNDLE_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == DATA_BUNDLE_ARREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == DATA_BUNDLE_ARREADY) & (1'b1 == ap_CS_fsm_state12)))) begin
        DATA_BUNDLE_ARVALID = 1'b1;
    end else begin
        DATA_BUNDLE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
        DATA_BUNDLE_AWVALID = 1'b1;
    end else begin
        DATA_BUNDLE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUNDLE_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        DATA_BUNDLE_BREADY = 1'b1;
    end else begin
        DATA_BUNDLE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_892 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln22_reg_926 == 1'd0)))) begin
        DATA_BUNDLE_RREADY = 1'b1;
    end else begin
        DATA_BUNDLE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln41_reg_1021_pp2_iter1_reg == 1'd0))) begin
        DATA_BUNDLE_WVALID = 1'b1;
    end else begin
        DATA_BUNDLE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        DATA_BUNDLE_blk_n_AR = m_axi_DATA_BUNDLE_ARREADY;
    end else begin
        DATA_BUNDLE_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
        DATA_BUNDLE_blk_n_AW = m_axi_DATA_BUNDLE_AWREADY;
    end else begin
        DATA_BUNDLE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        DATA_BUNDLE_blk_n_B = m_axi_DATA_BUNDLE_BVALID;
    end else begin
        DATA_BUNDLE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_892 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln22_reg_926 == 1'd0)))) begin
        DATA_BUNDLE_blk_n_R = m_axi_DATA_BUNDLE_RVALID;
    end else begin
        DATA_BUNDLE_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln41_reg_1021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        DATA_BUNDLE_blk_n_W = m_axi_DATA_BUNDLE_WREADY;
    end else begin
        DATA_BUNDLE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        a_buff_address0 = zext_ln35_1_fu_726_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_buff_address0 = zext_ln19_1_fu_557_p1;
    end else begin
        a_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        a_buff_ce0 = 1'b1;
    end else begin
        a_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln17_reg_892_pp0_iter1_reg == 1'd0))) begin
        a_buff_we0 = 1'b1;
    end else begin
        a_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_469_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln22_fu_562_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_764_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUNDLE_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln22_reg_926 == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_314_p4 = select_ln22_1_reg_935;
    end else begin
        ap_phi_mux_i1_0_phi_fu_314_p4 = i1_0_reg_310;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_reg_1021 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i3_0_phi_fu_393_p4 = select_ln41_1_reg_1030;
    end else begin
        ap_phi_mux_i3_0_phi_fu_393_p4 = i3_0_reg_389;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln17_reg_892 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_281_p4 = select_ln17_1_reg_901;
    end else begin
        ap_phi_mux_i_0_phi_fu_281_p4 = i_0_reg_277;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_BUNDLE_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        b_buff_address0 = zext_ln35_3_fu_748_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        b_buff_address0 = zext_ln24_1_fu_650_p1;
    end else begin
        b_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        b_buff_ce0 = 1'b1;
    end else begin
        b_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln22_reg_926_pp1_iter1_reg == 1'd0))) begin
        b_buff_we0 = 1'b1;
    end else begin
        b_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        c_buff_address0 = zext_ln43_1_fu_854_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        c_buff_address0 = c_buff_addr_reg_988;
    end else begin
        c_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        c_buff_ce0 = 1'b1;
    end else begin
        c_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        c_buff_we0 = 1'b1;
    end else begin
        c_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == DATA_BUNDLE_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln17_fu_469_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln17_fu_469_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == DATA_BUNDLE_ARREADY) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln22_fu_562_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln22_fu_562_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln28_fu_655_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln31_fu_679_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln34_fu_705_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_764_p2 == 1'd1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_764_p2 == 1'd1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == DATA_BUNDLE_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_475_p2 = (indvar_flatten_reg_266 + 19'd1);

assign add_ln19_1_fu_531_p2 = (zext_ln19_fu_527_p1 + shl_ln19_mid2_fu_513_p3);

assign add_ln19_fu_521_p2 = (10'd1 + select_ln17_fu_493_p3);

assign add_ln22_fu_568_p2 = (indvar_flatten10_reg_299 + 19'd1);

assign add_ln24_1_fu_624_p2 = (zext_ln24_fu_620_p1 + shl_ln24_mid2_fu_606_p3);

assign add_ln24_fu_614_p2 = (10'd1 + select_ln22_fu_586_p3);

assign add_ln32_fu_695_p2 = (zext_ln31_reg_969 + zext_ln32_fu_691_p1);

assign add_ln35_1_fu_721_p2 = (zext_ln35_fu_717_p1 + zext_ln31_reg_969);

assign add_ln35_2_fu_743_p2 = (zext_ln32_reg_983 + zext_ln35_2_fu_739_p1);

assign add_ln35_fu_759_p2 = (c_buff_load_1_reg_354 + mul_ln35_reg_1011);

assign add_ln41_fu_770_p2 = (indvar_flatten21_reg_378 + 19'd1);

assign add_ln43_1_fu_830_p2 = (zext_ln43_fu_822_p1 + shl_ln43_mid2_fu_808_p3);

assign add_ln43_fu_816_p2 = (10'd1 + select_ln41_fu_788_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == DATA_BUNDLE_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln17_reg_892 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == DATA_BUNDLE_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln17_reg_892 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == DATA_BUNDLE_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln22_reg_926 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == DATA_BUNDLE_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln22_reg_926 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state30_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state30_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == DATA_BUNDLE_RVALID) & (icmp_ln17_reg_892 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((1'b0 == DATA_BUNDLE_RVALID) & (icmp_ln22_reg_926 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((1'b0 == DATA_BUNDLE_AWREADY) & (icmp_ln28_fu_655_p2 == 1'd1));
end

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((1'b0 == DATA_BUNDLE_WREADY) & (icmp_ln41_reg_1021_pp2_iter1_reg == 1'd0));
end

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_7_fu_460_p1 = b_in3_reg_864;

assign empty_8_fu_441_p1 = a_in1_reg_869;

assign empty_fu_451_p1 = output5_reg_859;

assign i_1_fu_574_p2 = (10'd1 + ap_phi_mux_i1_0_phi_fu_314_p4);

assign i_2_fu_776_p2 = (10'd1 + ap_phi_mux_i3_0_phi_fu_393_p4);

assign i_3_fu_661_p2 = (i2_0_reg_332 + 10'd1);

assign i_fu_481_p2 = (10'd1 + ap_phi_mux_i_0_phi_fu_281_p4);

assign icmp_ln17_fu_469_p2 = ((indvar_flatten_reg_266 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_487_p2 = ((phi_ln19_reg_288 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_562_p2 = ((indvar_flatten10_reg_299 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_580_p2 = ((phi_ln24_reg_321 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_655_p2 = ((i2_0_reg_332 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_679_p2 = ((j_0_reg_343 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_705_p2 = ((k_0_reg_367 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_764_p2 = ((indvar_flatten21_reg_378 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_782_p2 = ((phi_ln43_reg_400 == 10'd512) ? 1'b1 : 1'b0);

assign j_fu_685_p2 = (j_0_reg_343 + 10'd1);

assign k_fu_711_p2 = (k_0_reg_367 + 10'd1);

assign lshr_ln2_fu_836_p4 = {{add_ln43_1_fu_830_p2[17:9]}};

assign mul_ln35_fu_753_p0 = a_buff_q0;

assign mul_ln35_fu_753_p1 = b_buff_q0;

assign mul_ln35_fu_753_p2 = ($signed(mul_ln35_fu_753_p0) * $signed(mul_ln35_fu_753_p1));

assign select_ln17_1_fu_501_p3 = ((icmp_ln19_fu_487_p2[0:0] === 1'b1) ? i_fu_481_p2 : ap_phi_mux_i_0_phi_fu_281_p4);

assign select_ln17_fu_493_p3 = ((icmp_ln19_fu_487_p2[0:0] === 1'b1) ? 10'd0 : phi_ln19_reg_288);

assign select_ln22_1_fu_594_p3 = ((icmp_ln24_fu_580_p2[0:0] === 1'b1) ? i_1_fu_574_p2 : ap_phi_mux_i1_0_phi_fu_314_p4);

assign select_ln22_fu_586_p3 = ((icmp_ln24_fu_580_p2[0:0] === 1'b1) ? 10'd0 : phi_ln24_reg_321);

assign select_ln41_1_fu_796_p3 = ((icmp_ln43_fu_782_p2[0:0] === 1'b1) ? i_2_fu_776_p2 : ap_phi_mux_i3_0_phi_fu_393_p4);

assign select_ln41_fu_788_p3 = ((icmp_ln43_fu_782_p2[0:0] === 1'b1) ? 10'd0 : phi_ln43_reg_400);

assign shl_ln19_mid2_fu_513_p3 = {{trunc_ln17_fu_509_p1}, {9'd0}};

assign shl_ln24_mid2_fu_606_p3 = {{trunc_ln22_fu_602_p1}, {9'd0}};

assign shl_ln43_mid2_fu_808_p3 = {{trunc_ln41_fu_804_p1}, {9'd0}};

assign tmp_1_fu_551_p3 = {{lshr_ln_reg_916_pp0_iter1_reg}, {trunc_ln19_reg_911_pp0_iter1_reg}};

assign tmp_5_fu_644_p3 = {{lshr_ln1_reg_950_pp1_iter1_reg}, {trunc_ln24_reg_945_pp1_iter1_reg}};

assign tmp_6_fu_667_p3 = {{i2_0_reg_332}, {9'd0}};

assign tmp_8_fu_846_p3 = {{lshr_ln2_fu_836_p4}, {trunc_ln43_fu_826_p1}};

assign tmp_9_fu_731_p3 = {{k_0_reg_367}, {9'd0}};

assign trunc_ln17_fu_509_p1 = select_ln17_1_fu_501_p3[8:0];

assign trunc_ln19_fu_537_p1 = select_ln17_fu_493_p3[8:0];

assign trunc_ln22_fu_602_p1 = select_ln22_1_fu_594_p3[8:0];

assign trunc_ln24_fu_630_p1 = select_ln22_fu_586_p3[8:0];

assign trunc_ln41_fu_804_p1 = select_ln41_1_fu_796_p3[8:0];

assign trunc_ln43_fu_826_p1 = select_ln41_fu_788_p3[8:0];

assign zext_ln19_1_fu_557_p1 = tmp_1_fu_551_p3;

assign zext_ln19_fu_527_p1 = select_ln17_fu_493_p3;

assign zext_ln24_1_fu_650_p1 = tmp_5_fu_644_p3;

assign zext_ln24_fu_620_p1 = select_ln22_fu_586_p3;

assign zext_ln31_fu_675_p1 = tmp_6_fu_667_p3;

assign zext_ln32_1_fu_700_p1 = add_ln32_fu_695_p2;

assign zext_ln32_fu_691_p1 = j_0_reg_343;

assign zext_ln35_1_fu_726_p1 = add_ln35_1_fu_721_p2;

assign zext_ln35_2_fu_739_p1 = tmp_9_fu_731_p3;

assign zext_ln35_3_fu_748_p1 = add_ln35_2_fu_743_p2;

assign zext_ln35_fu_717_p1 = k_0_reg_367;

assign zext_ln43_1_fu_854_p1 = tmp_8_fu_846_p3;

assign zext_ln43_fu_822_p1 = select_ln41_fu_788_p3;

always @ (posedge ap_clk) begin
    DATA_BUNDLE_addr_reg_880[31:30] <= 2'b00;
    DATA_BUNDLE_addr_1_reg_886[31:30] <= 2'b00;
    zext_ln31_reg_969[8:0] <= 9'b000000000;
    zext_ln31_reg_969[19] <= 1'b0;
    zext_ln32_reg_983[19:10] <= 10'b0000000000;
end

endmodule //gemm
