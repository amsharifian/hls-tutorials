-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm is
generic (
    C_M_AXI_DATA_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BUNDLE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_DATA_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_DATA_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_DATA_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUNDLE_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gemm,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=403964955,HLS_SYN_TPT=none,HLS_SYN_MEM=1408,HLS_SYN_DSP=3,HLS_SYN_FF=1333,HLS_SYN_LUT=1789,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_in : STD_LOGIC_VECTOR (31 downto 0);
    signal b_in : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BUNDLE_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln28_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln41_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal DATA_BUNDLE_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal DATA_BUNDLE_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln22_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln17_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_AWVALID : STD_LOGIC;
    signal DATA_BUNDLE_AWREADY : STD_LOGIC;
    signal DATA_BUNDLE_WVALID : STD_LOGIC;
    signal DATA_BUNDLE_WREADY : STD_LOGIC;
    signal DATA_BUNDLE_ARVALID : STD_LOGIC;
    signal DATA_BUNDLE_ARREADY : STD_LOGIC;
    signal DATA_BUNDLE_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BUNDLE_RVALID : STD_LOGIC;
    signal DATA_BUNDLE_RREADY : STD_LOGIC;
    signal DATA_BUNDLE_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BUNDLE_RLAST : STD_LOGIC;
    signal DATA_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BUNDLE_BVALID : STD_LOGIC;
    signal DATA_BUNDLE_BREADY : STD_LOGIC;
    signal DATA_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_266 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_0_reg_277 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln19_reg_288 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten10_reg_299 : STD_LOGIC_VECTOR (18 downto 0);
    signal i1_0_reg_310 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln24_reg_321 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten21_reg_378 : STD_LOGIC_VECTOR (18 downto 0);
    signal i3_0_reg_389 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln43_reg_400 : STD_LOGIC_VECTOR (9 downto 0);
    signal output5_reg_859 : STD_LOGIC_VECTOR (29 downto 0);
    signal b_in3_reg_864 : STD_LOGIC_VECTOR (29 downto 0);
    signal a_in1_reg_869 : STD_LOGIC_VECTOR (29 downto 0);
    signal DATA_BUNDLE_addr_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal DATA_BUNDLE_addr_1_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln17_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_fu_475_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln17_1_fu_501_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln17_1_reg_901 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln19_fu_521_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln19_fu_537_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_reg_911 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_reg_911_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_916 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_916_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal DATA_BUNDLE_addr_2_r_1_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln22_reg_926_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_568_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln22_1_fu_594_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln22_1_reg_935 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_fu_614_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln24_fu_630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln24_reg_945 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln24_reg_945_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln1_reg_950 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln1_reg_950_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal DATA_BUNDLE_addr_1_r_1_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state23_io : BOOLEAN;
    signal i_3_fu_661_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_964 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_fu_675_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln31_reg_969 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_fu_685_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_978 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln32_fu_691_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln32_reg_983 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln31_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_buff_addr_reg_988 : STD_LOGIC_VECTOR (17 downto 0);
    signal k_fu_711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_996 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln34_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln35_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln35_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln41_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state30_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln41_fu_770_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln41_1_fu_796_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln41_1_reg_1030 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln43_fu_816_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buff_load_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal a_buff_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal a_buff_ce0 : STD_LOGIC;
    signal a_buff_we0 : STD_LOGIC;
    signal a_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buff_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal b_buff_ce0 : STD_LOGIC;
    signal b_buff_we0 : STD_LOGIC;
    signal b_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buff_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal c_buff_ce0 : STD_LOGIC;
    signal c_buff_we0 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_281_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i1_0_phi_fu_314_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i2_0_reg_332 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal j_0_reg_343 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_buff_load_1_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_367 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i3_0_phi_fu_393_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_1_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_1_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_8_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_7_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal icmp_ln19_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln17_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln17_fu_493_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_fu_527_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln19_mid2_fu_513_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln19_1_fu_531_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_551_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln24_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_574_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln22_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_fu_620_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln24_mid2_fu_606_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln24_1_fu_624_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_644_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_667_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln32_fu_695_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln35_fu_717_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln35_1_fu_721_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_9_fu_731_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln35_2_fu_739_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln35_2_fu_743_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln35_fu_753_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_fu_804_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln41_fu_788_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln43_fu_822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln43_mid2_fu_808_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln43_1_fu_830_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln2_fu_836_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln43_fu_826_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_846_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component gemm_a_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_DATA_BUNDLE_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gemm_CONTROL_BUS_s_axi_U : component gemm_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_in => a_in,
        b_in => b_in,
        output_r => output_r);

    gemm_DATA_BUNDLE_m_axi_U : component gemm_DATA_BUNDLE_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 256,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_BUNDLE_AWVALID,
        AWREADY => m_axi_DATA_BUNDLE_AWREADY,
        AWADDR => m_axi_DATA_BUNDLE_AWADDR,
        AWID => m_axi_DATA_BUNDLE_AWID,
        AWLEN => m_axi_DATA_BUNDLE_AWLEN,
        AWSIZE => m_axi_DATA_BUNDLE_AWSIZE,
        AWBURST => m_axi_DATA_BUNDLE_AWBURST,
        AWLOCK => m_axi_DATA_BUNDLE_AWLOCK,
        AWCACHE => m_axi_DATA_BUNDLE_AWCACHE,
        AWPROT => m_axi_DATA_BUNDLE_AWPROT,
        AWQOS => m_axi_DATA_BUNDLE_AWQOS,
        AWREGION => m_axi_DATA_BUNDLE_AWREGION,
        AWUSER => m_axi_DATA_BUNDLE_AWUSER,
        WVALID => m_axi_DATA_BUNDLE_WVALID,
        WREADY => m_axi_DATA_BUNDLE_WREADY,
        WDATA => m_axi_DATA_BUNDLE_WDATA,
        WSTRB => m_axi_DATA_BUNDLE_WSTRB,
        WLAST => m_axi_DATA_BUNDLE_WLAST,
        WID => m_axi_DATA_BUNDLE_WID,
        WUSER => m_axi_DATA_BUNDLE_WUSER,
        ARVALID => m_axi_DATA_BUNDLE_ARVALID,
        ARREADY => m_axi_DATA_BUNDLE_ARREADY,
        ARADDR => m_axi_DATA_BUNDLE_ARADDR,
        ARID => m_axi_DATA_BUNDLE_ARID,
        ARLEN => m_axi_DATA_BUNDLE_ARLEN,
        ARSIZE => m_axi_DATA_BUNDLE_ARSIZE,
        ARBURST => m_axi_DATA_BUNDLE_ARBURST,
        ARLOCK => m_axi_DATA_BUNDLE_ARLOCK,
        ARCACHE => m_axi_DATA_BUNDLE_ARCACHE,
        ARPROT => m_axi_DATA_BUNDLE_ARPROT,
        ARQOS => m_axi_DATA_BUNDLE_ARQOS,
        ARREGION => m_axi_DATA_BUNDLE_ARREGION,
        ARUSER => m_axi_DATA_BUNDLE_ARUSER,
        RVALID => m_axi_DATA_BUNDLE_RVALID,
        RREADY => m_axi_DATA_BUNDLE_RREADY,
        RDATA => m_axi_DATA_BUNDLE_RDATA,
        RLAST => m_axi_DATA_BUNDLE_RLAST,
        RID => m_axi_DATA_BUNDLE_RID,
        RUSER => m_axi_DATA_BUNDLE_RUSER,
        RRESP => m_axi_DATA_BUNDLE_RRESP,
        BVALID => m_axi_DATA_BUNDLE_BVALID,
        BREADY => m_axi_DATA_BUNDLE_BREADY,
        BRESP => m_axi_DATA_BUNDLE_BRESP,
        BID => m_axi_DATA_BUNDLE_BID,
        BUSER => m_axi_DATA_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_BUNDLE_ARVALID,
        I_ARREADY => DATA_BUNDLE_ARREADY,
        I_ARADDR => DATA_BUNDLE_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_BUNDLE_RVALID,
        I_RREADY => DATA_BUNDLE_RREADY,
        I_RDATA => DATA_BUNDLE_RDATA,
        I_RID => DATA_BUNDLE_RID,
        I_RUSER => DATA_BUNDLE_RUSER,
        I_RRESP => DATA_BUNDLE_RRESP,
        I_RLAST => DATA_BUNDLE_RLAST,
        I_AWVALID => DATA_BUNDLE_AWVALID,
        I_AWREADY => DATA_BUNDLE_AWREADY,
        I_AWADDR => DATA_BUNDLE_addr_reg_880,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_40000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_BUNDLE_WVALID,
        I_WREADY => DATA_BUNDLE_WREADY,
        I_WDATA => c_buff_load_reg_1045,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_BUNDLE_BVALID,
        I_BREADY => DATA_BUNDLE_BREADY,
        I_BRESP => DATA_BUNDLE_BRESP,
        I_BID => DATA_BUNDLE_BID,
        I_BUSER => DATA_BUNDLE_BUSER);

    a_buff_U : component gemm_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_buff_address0,
        ce0 => a_buff_ce0,
        we0 => a_buff_we0,
        d0 => DATA_BUNDLE_addr_2_r_1_reg_921,
        q0 => a_buff_q0);

    b_buff_U : component gemm_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_buff_address0,
        ce0 => b_buff_ce0,
        we0 => b_buff_we0,
        d0 => DATA_BUNDLE_addr_1_r_1_reg_955,
        q0 => b_buff_q0);

    c_buff_U : component gemm_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_buff_address0,
        ce0 => c_buff_ce0,
        we0 => c_buff_we0,
        d0 => c_buff_load_1_reg_354,
        q0 => c_buff_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_buff_load_1_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                c_buff_load_1_reg_354 <= add_ln35_fu_759_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln31_fu_679_p2 = ap_const_lv1_0))) then 
                c_buff_load_1_reg_354 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i1_0_reg_310 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_reg_926 = ap_const_lv1_0))) then 
                i1_0_reg_310 <= select_ln22_1_reg_935;
            end if; 
        end if;
    end process;

    i2_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i2_0_reg_332 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln31_fu_679_p2 = ap_const_lv1_1))) then 
                i2_0_reg_332 <= i_3_reg_964;
            end if; 
        end if;
    end process;

    i3_0_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
                i3_0_reg_389 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_1021 = ap_const_lv1_0))) then 
                i3_0_reg_389 <= select_ln41_1_reg_1030;
            end if; 
        end if;
    end process;

    i_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_892 = ap_const_lv1_0))) then 
                i_0_reg_277 <= select_ln17_1_reg_901;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_277 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten10_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten10_reg_299 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_0))) then 
                indvar_flatten10_reg_299 <= add_ln22_fu_568_p2;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
                indvar_flatten21_reg_378 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_764_p2 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_378 <= add_ln41_fu_770_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_266 <= add_ln17_fu_475_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_266 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    j_0_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln34_fu_705_p2 = ap_const_lv1_1))) then 
                j_0_reg_343 <= j_reg_978;
            elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_0))) then 
                j_0_reg_343 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_0_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_0_reg_367 <= k_reg_996;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln31_fu_679_p2 = ap_const_lv1_0))) then 
                k_0_reg_367 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_ln19_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_0))) then 
                phi_ln19_reg_288 <= add_ln19_fu_521_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln19_reg_288 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_ln24_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_ln24_reg_321 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_0))) then 
                phi_ln24_reg_321 <= add_ln24_fu_614_p2;
            end if; 
        end if;
    end process;

    phi_ln43_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
                phi_ln43_reg_400 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_764_p2 = ap_const_lv1_0))) then 
                phi_ln43_reg_400 <= add_ln43_fu_816_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_reg_926 = ap_const_lv1_0))) then
                DATA_BUNDLE_addr_1_r_1_reg_955 <= DATA_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    DATA_BUNDLE_addr_1_reg_886(29 downto 0) <= empty_7_fu_460_p1(32 - 1 downto 0)(29 downto 0);
                    DATA_BUNDLE_addr_reg_880(29 downto 0) <= empty_fu_451_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_892 = ap_const_lv1_0))) then
                DATA_BUNDLE_addr_2_r_1_reg_921 <= DATA_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_in1_reg_869 <= a_in(31 downto 2);
                b_in3_reg_864 <= b_in(31 downto 2);
                output5_reg_859 <= output_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln31_fu_679_p2 = ap_const_lv1_0))) then
                c_buff_addr_reg_988 <= zext_ln32_1_fu_700_p1(18 - 1 downto 0);
                    zext_ln32_reg_983(9 downto 0) <= zext_ln32_fu_691_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_1021 = ap_const_lv1_0))) then
                c_buff_load_reg_1045 <= c_buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                i_3_reg_964 <= i_3_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln17_reg_892 <= icmp_ln17_fu_469_p2;
                icmp_ln17_reg_892_pp0_iter1_reg <= icmp_ln17_reg_892;
                lshr_ln_reg_916_pp0_iter1_reg <= lshr_ln_reg_916;
                trunc_ln19_reg_911_pp0_iter1_reg <= trunc_ln19_reg_911;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln22_reg_926 <= icmp_ln22_fu_562_p2;
                icmp_ln22_reg_926_pp1_iter1_reg <= icmp_ln22_reg_926;
                lshr_ln1_reg_950_pp1_iter1_reg <= lshr_ln1_reg_950;
                trunc_ln24_reg_945_pp1_iter1_reg <= trunc_ln24_reg_945;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln41_reg_1021 <= icmp_ln41_fu_764_p2;
                icmp_ln41_reg_1021_pp2_iter1_reg <= icmp_ln41_reg_1021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_reg_978 <= j_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                k_reg_996 <= k_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_0))) then
                lshr_ln1_reg_950 <= add_ln24_1_fu_624_p2(17 downto 9);
                trunc_ln24_reg_945 <= trunc_ln24_fu_630_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_0))) then
                lshr_ln_reg_916 <= add_ln19_1_fu_531_p2(17 downto 9);
                trunc_ln19_reg_911 <= trunc_ln19_fu_537_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul_ln35_reg_1011 <= mul_ln35_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_0))) then
                select_ln17_1_reg_901 <= select_ln17_1_fu_501_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_0))) then
                select_ln22_1_reg_935 <= select_ln22_1_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_764_p2 = ap_const_lv1_0))) then
                select_ln41_1_reg_1030 <= select_ln41_1_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_0))) then
                    zext_ln31_reg_969(18 downto 9) <= zext_ln31_fu_675_p1(18 downto 9);
            end if;
        end if;
    end process;
    DATA_BUNDLE_addr_reg_880(31 downto 30) <= "00";
    DATA_BUNDLE_addr_1_reg_886(31 downto 30) <= "00";
    zext_ln31_reg_969(8 downto 0) <= "000000000";
    zext_ln31_reg_969(19) <= '0';
    zext_ln32_reg_983(19 downto 10) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state23, icmp_ln28_fu_655_p2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state35, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, DATA_BUNDLE_ARREADY, DATA_BUNDLE_BVALID, icmp_ln17_fu_469_p2, ap_enable_reg_pp0_iter0, icmp_ln22_fu_562_p2, ap_enable_reg_pp1_iter0, ap_block_state23_io, ap_CS_fsm_state24, icmp_ln31_fu_679_p2, ap_CS_fsm_state25, icmp_ln34_fu_705_p2, icmp_ln41_fu_764_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = DATA_BUNDLE_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_469_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = DATA_BUNDLE_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln22_fu_562_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln31_fu_679_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln34_fu_705_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_764_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_764_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = DATA_BUNDLE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_BUNDLE_ARADDR_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, DATA_BUNDLE_ARREADY, DATA_BUNDLE_addr_1_reg_886, empty_8_fu_441_p1)
    begin
        if ((ap_const_logic_1 = DATA_BUNDLE_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                DATA_BUNDLE_ARADDR <= DATA_BUNDLE_addr_1_reg_886;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                DATA_BUNDLE_ARADDR <= empty_8_fu_441_p1(32 - 1 downto 0);
            else 
                DATA_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            DATA_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_BUNDLE_ARVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, DATA_BUNDLE_ARREADY)
    begin
        if ((((ap_const_logic_1 = DATA_BUNDLE_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = DATA_BUNDLE_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            DATA_BUNDLE_ARVALID <= ap_const_logic_1;
        else 
            DATA_BUNDLE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BUNDLE_AWVALID_assign_proc : process(ap_CS_fsm_state23, icmp_ln28_fu_655_p2, ap_block_state23_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
            DATA_BUNDLE_AWVALID <= ap_const_logic_1;
        else 
            DATA_BUNDLE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BUNDLE_BREADY_assign_proc : process(ap_CS_fsm_state35, DATA_BUNDLE_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_BUNDLE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            DATA_BUNDLE_BREADY <= ap_const_logic_1;
        else 
            DATA_BUNDLE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BUNDLE_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln22_reg_926, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_892, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_892 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln22_reg_926 = ap_const_lv1_0)))) then 
            DATA_BUNDLE_RREADY <= ap_const_logic_1;
        else 
            DATA_BUNDLE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BUNDLE_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln41_reg_1021_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln41_reg_1021_pp2_iter1_reg = ap_const_lv1_0))) then 
            DATA_BUNDLE_WVALID <= ap_const_logic_1;
        else 
            DATA_BUNDLE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BUNDLE_blk_n_AR_assign_proc : process(m_axi_DATA_BUNDLE_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            DATA_BUNDLE_blk_n_AR <= m_axi_DATA_BUNDLE_ARREADY;
        else 
            DATA_BUNDLE_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_BUNDLE_blk_n_AW_assign_proc : process(m_axi_DATA_BUNDLE_AWREADY, ap_CS_fsm_state23, icmp_ln28_fu_655_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1))) then 
            DATA_BUNDLE_blk_n_AW <= m_axi_DATA_BUNDLE_AWREADY;
        else 
            DATA_BUNDLE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_BUNDLE_blk_n_B_assign_proc : process(m_axi_DATA_BUNDLE_BVALID, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            DATA_BUNDLE_blk_n_B <= m_axi_DATA_BUNDLE_BVALID;
        else 
            DATA_BUNDLE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_BUNDLE_blk_n_R_assign_proc : process(m_axi_DATA_BUNDLE_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln22_reg_926, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln17_reg_892)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln17_reg_892 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln22_reg_926 = ap_const_lv1_0)))) then 
            DATA_BUNDLE_blk_n_R <= m_axi_DATA_BUNDLE_RVALID;
        else 
            DATA_BUNDLE_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    DATA_BUNDLE_blk_n_W_assign_proc : process(m_axi_DATA_BUNDLE_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln41_reg_1021_pp2_iter1_reg)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln41_reg_1021_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            DATA_BUNDLE_blk_n_W <= m_axi_DATA_BUNDLE_WREADY;
        else 
            DATA_BUNDLE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    a_buff_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state25, ap_enable_reg_pp0_iter2, zext_ln19_1_fu_557_p1, zext_ln35_1_fu_726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            a_buff_address0 <= zext_ln35_1_fu_726_p1(18 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            a_buff_address0 <= zext_ln19_1_fu_557_p1(18 - 1 downto 0);
        else 
            a_buff_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_buff_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state25, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            a_buff_ce0 <= ap_const_logic_1;
        else 
            a_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_buff_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_892_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln17_reg_892_pp0_iter1_reg = ap_const_lv1_0))) then 
            a_buff_we0 <= ap_const_logic_1;
        else 
            a_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_475_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_266) + unsigned(ap_const_lv19_1));
    add_ln19_1_fu_531_p2 <= std_logic_vector(unsigned(zext_ln19_fu_527_p1) + unsigned(shl_ln19_mid2_fu_513_p3));
    add_ln19_fu_521_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln17_fu_493_p3));
    add_ln22_fu_568_p2 <= std_logic_vector(unsigned(indvar_flatten10_reg_299) + unsigned(ap_const_lv19_1));
    add_ln24_1_fu_624_p2 <= std_logic_vector(unsigned(zext_ln24_fu_620_p1) + unsigned(shl_ln24_mid2_fu_606_p3));
    add_ln24_fu_614_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln22_fu_586_p3));
    add_ln32_fu_695_p2 <= std_logic_vector(unsigned(zext_ln31_reg_969) + unsigned(zext_ln32_fu_691_p1));
    add_ln35_1_fu_721_p2 <= std_logic_vector(unsigned(zext_ln35_fu_717_p1) + unsigned(zext_ln31_reg_969));
    add_ln35_2_fu_743_p2 <= std_logic_vector(unsigned(zext_ln32_reg_983) + unsigned(zext_ln35_2_fu_739_p1));
    add_ln35_fu_759_p2 <= std_logic_vector(unsigned(c_buff_load_1_reg_354) + unsigned(mul_ln35_reg_1011));
    add_ln41_fu_770_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_378) + unsigned(ap_const_lv19_1));
    add_ln43_1_fu_830_p2 <= std_logic_vector(unsigned(zext_ln43_fu_822_p1) + unsigned(shl_ln43_mid2_fu_808_p3));
    add_ln43_fu_816_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln41_fu_788_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln17_reg_892, DATA_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln17_reg_892 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln17_reg_892, DATA_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln17_reg_892 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln22_reg_926, DATA_BUNDLE_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln22_reg_926 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln22_reg_926, DATA_BUNDLE_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln22_reg_926 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state30_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state30_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state30_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state30_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln17_reg_892, DATA_BUNDLE_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (icmp_ln17_reg_892 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(icmp_ln22_reg_926, DATA_BUNDLE_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((ap_const_logic_0 = DATA_BUNDLE_RVALID) and (icmp_ln22_reg_926 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(icmp_ln28_fu_655_p2, DATA_BUNDLE_AWREADY)
    begin
                ap_block_state23_io <= ((ap_const_logic_0 = DATA_BUNDLE_AWREADY) and (icmp_ln28_fu_655_p2 = ap_const_lv1_1));
    end process;

        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_io_assign_proc : process(icmp_ln41_reg_1021_pp2_iter1_reg, DATA_BUNDLE_WREADY)
    begin
                ap_block_state30_io <= ((ap_const_logic_0 = DATA_BUNDLE_WREADY) and (icmp_ln41_reg_1021_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln17_fu_469_p2)
    begin
        if ((icmp_ln17_fu_469_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln22_fu_562_p2)
    begin
        if ((icmp_ln22_fu_562_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(icmp_ln41_fu_764_p2)
    begin
        if ((icmp_ln41_fu_764_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state35, DATA_BUNDLE_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_BUNDLE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_phi_fu_314_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln22_reg_926, i1_0_reg_310, select_ln22_1_reg_935)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln22_reg_926 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_0_phi_fu_314_p4 <= select_ln22_1_reg_935;
        else 
            ap_phi_mux_i1_0_phi_fu_314_p4 <= i1_0_reg_310;
        end if; 
    end process;


    ap_phi_mux_i3_0_phi_fu_393_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln41_reg_1021, i3_0_reg_389, ap_CS_fsm_pp2_stage0, select_ln41_1_reg_1030, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_1021 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i3_0_phi_fu_393_p4 <= select_ln41_1_reg_1030;
        else 
            ap_phi_mux_i3_0_phi_fu_393_p4 <= i3_0_reg_389;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_281_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln17_reg_892, i_0_reg_277, select_ln17_1_reg_901)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln17_reg_892 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_281_p4 <= select_ln17_1_reg_901;
        else 
            ap_phi_mux_i_0_phi_fu_281_p4 <= i_0_reg_277;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35, DATA_BUNDLE_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_BUNDLE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_buff_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state25, ap_enable_reg_pp1_iter2, zext_ln24_1_fu_650_p1, zext_ln35_3_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            b_buff_address0 <= zext_ln35_3_fu_748_p1(18 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            b_buff_address0 <= zext_ln24_1_fu_650_p1(18 - 1 downto 0);
        else 
            b_buff_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_buff_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state25, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            b_buff_ce0 <= ap_const_logic_1;
        else 
            b_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_buff_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln22_reg_926_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln22_reg_926_pp1_iter1_reg = ap_const_lv1_0))) then 
            b_buff_we0 <= ap_const_logic_1;
        else 
            b_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_buff_address0_assign_proc : process(ap_block_pp2_stage0, c_buff_addr_reg_988, ap_CS_fsm_state25, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln43_1_fu_854_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            c_buff_address0 <= zext_ln43_1_fu_854_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_buff_address0 <= c_buff_addr_reg_988;
        else 
            c_buff_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_buff_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            c_buff_ce0 <= ap_const_logic_1;
        else 
            c_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_buff_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_buff_we0 <= ap_const_logic_1;
        else 
            c_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_7_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_in3_reg_864),64));
    empty_8_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_in1_reg_869),64));
    empty_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output5_reg_859),64));
    i_1_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_i1_0_phi_fu_314_p4));
    i_2_fu_776_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_i3_0_phi_fu_393_p4));
    i_3_fu_661_p2 <= std_logic_vector(unsigned(i2_0_reg_332) + unsigned(ap_const_lv10_1));
    i_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_i_0_phi_fu_281_p4));
    icmp_ln17_fu_469_p2 <= "1" when (indvar_flatten_reg_266 = ap_const_lv19_40000) else "0";
    icmp_ln19_fu_487_p2 <= "1" when (phi_ln19_reg_288 = ap_const_lv10_200) else "0";
    icmp_ln22_fu_562_p2 <= "1" when (indvar_flatten10_reg_299 = ap_const_lv19_40000) else "0";
    icmp_ln24_fu_580_p2 <= "1" when (phi_ln24_reg_321 = ap_const_lv10_200) else "0";
    icmp_ln28_fu_655_p2 <= "1" when (i2_0_reg_332 = ap_const_lv10_200) else "0";
    icmp_ln31_fu_679_p2 <= "1" when (j_0_reg_343 = ap_const_lv10_200) else "0";
    icmp_ln34_fu_705_p2 <= "1" when (k_0_reg_367 = ap_const_lv10_200) else "0";
    icmp_ln41_fu_764_p2 <= "1" when (indvar_flatten21_reg_378 = ap_const_lv19_40000) else "0";
    icmp_ln43_fu_782_p2 <= "1" when (phi_ln43_reg_400 = ap_const_lv10_200) else "0";
    j_fu_685_p2 <= std_logic_vector(unsigned(j_0_reg_343) + unsigned(ap_const_lv10_1));
    k_fu_711_p2 <= std_logic_vector(unsigned(k_0_reg_367) + unsigned(ap_const_lv10_1));
    lshr_ln2_fu_836_p4 <= add_ln43_1_fu_830_p2(17 downto 9);
    mul_ln35_fu_753_p0 <= a_buff_q0;
    mul_ln35_fu_753_p1 <= b_buff_q0;
    mul_ln35_fu_753_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_fu_753_p0) * signed(mul_ln35_fu_753_p1))), 32));
    select_ln17_1_fu_501_p3 <= 
        i_fu_481_p2 when (icmp_ln19_fu_487_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_281_p4;
    select_ln17_fu_493_p3 <= 
        ap_const_lv10_0 when (icmp_ln19_fu_487_p2(0) = '1') else 
        phi_ln19_reg_288;
    select_ln22_1_fu_594_p3 <= 
        i_1_fu_574_p2 when (icmp_ln24_fu_580_p2(0) = '1') else 
        ap_phi_mux_i1_0_phi_fu_314_p4;
    select_ln22_fu_586_p3 <= 
        ap_const_lv10_0 when (icmp_ln24_fu_580_p2(0) = '1') else 
        phi_ln24_reg_321;
    select_ln41_1_fu_796_p3 <= 
        i_2_fu_776_p2 when (icmp_ln43_fu_782_p2(0) = '1') else 
        ap_phi_mux_i3_0_phi_fu_393_p4;
    select_ln41_fu_788_p3 <= 
        ap_const_lv10_0 when (icmp_ln43_fu_782_p2(0) = '1') else 
        phi_ln43_reg_400;
    shl_ln19_mid2_fu_513_p3 <= (trunc_ln17_fu_509_p1 & ap_const_lv9_0);
    shl_ln24_mid2_fu_606_p3 <= (trunc_ln22_fu_602_p1 & ap_const_lv9_0);
    shl_ln43_mid2_fu_808_p3 <= (trunc_ln41_fu_804_p1 & ap_const_lv9_0);
    tmp_1_fu_551_p3 <= (lshr_ln_reg_916_pp0_iter1_reg & trunc_ln19_reg_911_pp0_iter1_reg);
    tmp_5_fu_644_p3 <= (lshr_ln1_reg_950_pp1_iter1_reg & trunc_ln24_reg_945_pp1_iter1_reg);
    tmp_6_fu_667_p3 <= (i2_0_reg_332 & ap_const_lv9_0);
    tmp_8_fu_846_p3 <= (lshr_ln2_fu_836_p4 & trunc_ln43_fu_826_p1);
    tmp_9_fu_731_p3 <= (k_0_reg_367 & ap_const_lv9_0);
    trunc_ln17_fu_509_p1 <= select_ln17_1_fu_501_p3(9 - 1 downto 0);
    trunc_ln19_fu_537_p1 <= select_ln17_fu_493_p3(9 - 1 downto 0);
    trunc_ln22_fu_602_p1 <= select_ln22_1_fu_594_p3(9 - 1 downto 0);
    trunc_ln24_fu_630_p1 <= select_ln22_fu_586_p3(9 - 1 downto 0);
    trunc_ln41_fu_804_p1 <= select_ln41_1_fu_796_p3(9 - 1 downto 0);
    trunc_ln43_fu_826_p1 <= select_ln41_fu_788_p3(9 - 1 downto 0);
    zext_ln19_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_551_p3),64));
    zext_ln19_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_fu_493_p3),18));
    zext_ln24_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_644_p3),64));
    zext_ln24_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_586_p3),18));
    zext_ln31_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_667_p3),20));
    zext_ln32_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_695_p2),64));
    zext_ln32_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_343),20));
    zext_ln35_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_721_p2),64));
    zext_ln35_2_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_731_p3),20));
    zext_ln35_3_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_743_p2),64));
    zext_ln35_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_367),20));
    zext_ln43_1_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_846_p3),64));
    zext_ln43_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_fu_788_p3),18));
end behav;
